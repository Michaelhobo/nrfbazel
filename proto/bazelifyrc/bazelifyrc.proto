syntax = "proto3";

package bazelifyrc;

option go_package = "github.com/Michaelhobo/nrfbazel/proto/bazelifyrc";

// Configuration configures the behavior of the nrf52bazelify tool.
message Configuration {
  // Maps target name to a Bazel label override. e.g. we can set an override for
  // a.h=//c/b:a
  map<string, string> target_overrides = 1;
  // Specify paths relative to the SDK root that should be excluded.
  // Shell file name patterns are allowed, based on
  // https://golang.org/pkg/path/filepath/#Match. Excluded paths will not get
  // BUILD files generated for them, and will not be used for resolving
  // dependencies. This is useful for excluding things like the examples
  // directory.
  repeated string excludes = 2;
  // Ignore all of these header files, because they don't need an explicit
  // dependency. This is used to ignore c stdlib headers, e.g. string.h.
  repeated string ignore_headers = 3;
  // Add a number of include dirs. Relative imports are searched from these
  // include dirs.
  // Each include_dir is relative to the SDk directory.
  // All include_dirs must be within the workspace.
  repeated string include_dirs = 4;
  // Remaps header files to a customizable field in nrf_cc_binary rules.
  // cc_library rules that include the given headers will depend on a custom
  // rule which will be automatically populated at compile time based on the
  // settings in the nrf_cc_binary rule.
  // To set the value of the remapped rule, nrf_cc_binary has a remap field,
  // where you specify what each header remaps to.
  // For example:
  // nrf_cc_binary(
  //   name = "something",
  //   remap = {
  //     "sdk_config.h": ":my_sdk_config",
  //   },
  // )
  // Then, all includes that depend on sdk_config.h will be built with the
  // sdk_config.h header file set to ":my_sdk_config".
  repeated string remaps = 5;
}
